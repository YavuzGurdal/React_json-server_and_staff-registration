{"version":3,"sources":["components/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","useState","list","setList","name","setName","surname","setSurname","city","setCity","email","setEmail","display","setDisplay","update","setUpdate","edit","setEdit","id","setId","search","setSearch","useEffect","axios","get","then","res","data","catch","err","console","log","editHandler","item","deleteHandler","itemId","delete","className","onSubmit","e","preventDefault","alert","post","uuid","put","type","value","onChange","target","placeholder","onClick","map","index","key","filter","toLowerCase","includes","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6b2a1229.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './HomePage.css' // scss icin css dosyasini import ediyoruz\r\nimport axios from 'axios';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n\r\nfunction HomePage() {\r\n\r\n    const [list, setList] = useState([])\r\n\r\n    const [name, setName] = useState('')\r\n    const [surname, setSurname] = useState('')\r\n    const [city, setCity] = useState('')\r\n    const [email, setEmail] = useState('')\r\n\r\n    const [display, setDisplay] = useState(false)\r\n\r\n    const [update, setUpdate] = useState(false)\r\n\r\n    const [edit, setEdit] = useState(false) // guncelleme icin\r\n    const [id, setId] = useState('') // guncelleme icin\r\n\r\n    const [search, setSearch] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        axios\r\n            .get('http://localhost:3004/users') // get 1 parametre alir. url adresi\r\n            .then(res => setList(res.data))\r\n            .catch(err => console.log(err))\r\n\r\n    }, [update])\r\n\r\n    const submitHandler = e => { // burda post metodunu kullandik\r\n        e.preventDefault(); // submit olan butonlarin oldugu yerde yazilmali. sayfanin yenilenmesini engelliyor\r\n\r\n        if (!search & (name === '' || surname === '' || city === '' || email === '')) { // bu if kosulunu bos gecilmemesi icin yazdik.\r\n            alert('Bütün alanları doldurunuz!...');\r\n        } else {\r\n\r\n            if (!edit & !search) {\r\n                axios\r\n                    .post('http://localhost:3004/users', { // post 2 adet parametre alir. 1.parametre; url adresi , 2.parametre; data\r\n                        id: uuid(),\r\n                        name,\r\n                        surname,\r\n                        city,\r\n                        email\r\n\r\n                        // soldakiler key, sagdakiler formdan gelen value'lar. alttakiler yukaridakilerle ayni\r\n                        // name: name,\r\n                        // surname: surname,\r\n                        // city: city,\r\n                        // email: email\r\n                    })\r\n                    .then(res => {\r\n                        //console.log(res.data)\r\n                        setUpdate(!update) // state'i degistirmek icin yaptik. true veya false olmasi onemli degil.\r\n                        // bunu kullanici ekleyince direk ekranda yazmasi icin yazdik\r\n\r\n                        // asagidakileri input kisimlarinin bosaltilmasi icin yaptik\r\n                        setName('')\r\n                        setSurname('')\r\n                        setCity('')\r\n                        setEmail('')\r\n                        setDisplay(!display)\r\n                    })\r\n                    .catch(err => console.log(err))\r\n\r\n            } else if (edit & !search) { // guncelleme icin\r\n                axios\r\n                    .put(`http://localhost:3004/users/${id}`, { // bu metod mevcut bilgiyi guncellemek icin\r\n                        id: uuid(),\r\n                        name,\r\n                        surname,\r\n                        city,\r\n                        email\r\n                    })\r\n                    .then(res => {\r\n                        setUpdate(!update) // state'i degistirmek icin yaptik. true veya false olmasi onemli degil.\r\n                        // bunu kullanici ekleyince direk ekranda yazmasi icin yazdik\r\n\r\n                        // asagidakileri input kisimlarinin bosaltilmasi icin yaptik\r\n                        setName('')\r\n                        setSurname('')\r\n                        setCity('')\r\n                        setEmail('')\r\n                        setDisplay(!display)\r\n\r\n                        setEdit(false) // bu ikisi edit icin extra\r\n                        setId('')\r\n                    })\r\n                    .catch(err => console.log(err))\r\n\r\n            } else {\r\n                setSearch(false)\r\n                setDisplay(false)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    const editHandler = item => { // asagidakileri yazmamin sebebi sectigim kartin degerlerini yazdirmak\r\n        setName(item.name)\r\n        setSurname(item.surname)\r\n        setCity(item.city)\r\n        setEmail(item.email)\r\n\r\n        setEdit(true)\r\n\r\n        if (!display) { // display ture da olsa false da olsa, true yapacak\r\n            setDisplay(true)\r\n        }\r\n\r\n        setId(item.id) // guncelleme icin\r\n    }\r\n\r\n    const deleteHandler = itemId => { // burdaki itemId parametre olarak gelen id\r\n        // silme metodu 1 parametre aliyor.\r\n        axios\r\n            .delete(`http://localhost:3004/users/${itemId}`)\r\n            .then(res => {\r\n                // console.log(res.data)\r\n                setUpdate(!update)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    const searchHandler = () => {\r\n        setDisplay(true)\r\n        setName('')\r\n        setSurname('')\r\n        setCity('')\r\n        setEmail('')\r\n\r\n        setSearch(!search)\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n\r\n            {\r\n                display &&\r\n                <div>\r\n                    <form onSubmit={submitHandler}>\r\n                        <h3>{search ? 'Search User' : edit ? 'Update User' : 'Create New User'}</h3>\r\n                        {/* value degerlerini edit yapmak icin atadik */}\r\n                        <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} placeholder='Name' />\r\n                        {/* inputa attribute olarak required yazarsak bos gecilemez */}\r\n                        <input type=\"text\" value={surname} onChange={(e) => setSurname(e.target.value)} placeholder='Surname' />\r\n                        <input type=\"text\" value={city} onChange={(e) => setCity(e.target.value)} placeholder='City' />\r\n                        <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} placeholder='E-Mail' />\r\n                        <button type='submit'>{search ? 'Search User' : edit ? 'Update User' : 'Add New User'}</button>\r\n                        {/* form kullandigim icin submit yapiyorum */}\r\n                    </form>\r\n                </div>\r\n            }\r\n\r\n\r\n            <div>\r\n                <button onClick={() => setDisplay(!display)}>Add User</button>\r\n                <button onClick={searchHandler}>Search User</button>\r\n            </div>\r\n\r\n            {/*asagidakini component'e cevirebilirim*/}\r\n            {\r\n                !search && // search yanlışise calisacak\r\n\r\n                list.map((item, index) =>\r\n\r\n                    <div key={item.id} className=\"user\">\r\n                        <div>\r\n                            <p>{index + 1}</p>\r\n                            <p>{item.name} {' '} {item.surname}</p>\r\n                            <p>{item.city}</p>\r\n                            <p>{item.email}</p>\r\n                        </div>\r\n                        <div>\r\n                            <button onClick={() => editHandler(item)}>Edit</button> {/* itemin hepsini parametre olarak gonderiyorum \r\n                            fonksiyonda () oldugu icin.....\r\n                            */}\r\n                            <button onClick={() => deleteHandler(item.id)}>Delete</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                )\r\n            }\r\n\r\n            {\r\n                search && // search dogru ise calisacak\r\n\r\n                list.filter(item => item.name.toLowerCase().includes(name)) // burasi filtre yapmak icin\r\n                    .map((item, index) =>\r\n\r\n                        <div key={item.id} className=\"user\">\r\n                            <div>\r\n                                <p>{index + 1}</p>\r\n                                <p>{item.name} {' '} {item.surname}</p>\r\n                                <p>{item.city}</p>\r\n                                <p>{item.email}</p>\r\n                            </div>\r\n                            <div>\r\n                                <button onClick={() => editHandler(item)}>Edit</button> {/* itemin hepsini parametre olarak gonderiyorum \r\n                            fonksiyonda () oldugu icin.....\r\n                            */}\r\n                                <button onClick={() => deleteHandler(item.id)}>Delete</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    )\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import React from 'react';\nimport HomePage from './components/HomePage';\n// import './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}